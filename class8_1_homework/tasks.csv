Izvini se be,”Debit: Въвежда се месец от командния ред.Програмата да пресмята дебита за всяка една валута в този месец и да ги сортира във възходяш ред.Резултата се записва в month_results.csv”,Debit_test.rb
Izvini se be,“Goals_difference: Въвежда се от командния ред като аргумент даден отбор присъстващ във файла bpl.csv. Във файла има седем колони:1.място в класирането ; 2.име; 3.победи;  4.загуби;  5.равенства; 6.голова разлика; 7.точки. След въвеждане на отбор , се взима неговата голова разлика и се сравнява с тази на другите отбори.Всички които имат по-голяма разлика от подадения да се сортират по тяхната позиция в класирането и да се въведат в друг файл наречен Otborutdadenkatoargument_result.csv”,Goal_difference_test.rb
Izvini se be,”Въвежда се от командния ред като аргумент даден отбор присъстващ във файла bpl.csv. Във файла има седем колони:1.място в класирането ; 2.име; 3.победи;  4.загуби;  5.равенства; 6.голова разлика; 7.точки.Въвежда се като аргумент разликата вежду победи и загуби.Пример:въвежда се 3 взимат се имената и тяхната разлика , чиято е по малка от дадената като аргумент.Резултата се записва в Otborsnailosharazlika_result.csv като резултата трябва да е сортиран в възходяш ред”,Wins_losses_test.rb
Izvini se be,”Приемат се като аргументи 3 числа.Първите 2 места са в таблицата(пример:6 и 13),третият е точки от класирането.Взима се информация за всички отбори, намиращи се в таблицата между първите два аргумента, които имат точки в класирането,различни от третия подаден аргумент.Информацията трябва да бъде сортирана в низходяш ред по брой равенства и записана в naimalkiqtbroizagubiotteziotbori.csv”, League_points_test.rb
Izvini se be,Task_6: Даден е CSV файл описващ героите. Форматът е герой/клас/дата на излизане/сума на героя.От командния ред като първи аргумент се подава champs.csv, като втори се подава result.csv,а като трети и четвърти се подава класа на героя. Да се направи задача, която изкарва целия ред форматиран така(Morgana,Mage/Support,2009-02-21,1350),но на герои от следния клас. Класа на героя в csv файла е написан клас1/клас2. Задачата трябва да работи при всички комбинации на двата класа. Например ако напишеш клас2 клас1 трябва да ти изкара същото,което ще ти изкара и при клас1 клас2, също така програмата трябва да работи и само с един клас(при един клас трябва да ти изкара всички герои, които съдържа този клас). Резултата трябва да се сортиран по дата на излизане(във възходящ ред). Резултата да е записан във файла подаден като втори аргомент. ВНИМАНИE името на фила ви трябва да завършва на _6.rb,test6.rb
Izvini se be,Task_4: Даден е CSV файл описващ героите. Форматът е герой/клас/дата на излизане/сума на героя.От командния ред като първи аргумент се подава champs.csv,a като втори се подава сумата на героя. Да се направи задача, която да записва в CSV файл(който е подаден като трети аргомент) редовете на които сумата на героя е равна на подадената като втори аргомент сума. Редът трябва да е форматиран така Aatrox,Fighter/Tank,date_2013-06-13,6300(просто не трябва да има champ_ пред името на героя) и да е сортиран по азбучния ред на героите .ВНИМАНИE името на файла ви трябва да завършва на _4.rb, test4.rb
Izvini se be,Task_2: Даден е банков CSV файл. Форматът е пореден номер/дата/дебит/кредит/получател-наредител/забележка(PAYPAL,OMV,EUROPCAR,EKO,LUKOIL,GOOGLE и др.).От командния ред като първи аргумент се подава bank.csv,a като втори се подава забележка. Да се направи задача, която да записва в CSV файл(който е подаден като трети аргомент) датите(сортирани във възходяш реди) в които има тази бележка, която е подадена като аргомет.ВНИМАНИE Ако има една бележка, която се среща в няколко дни,то  датата трябвада се запише само веднъж.ВНИМАНИE името на файла ви трябва да завършва на _2.rb, test2.rb
smartest_team,Да се създаде програма която приема име на csv файл като аргумент 1. Файлът е в формат една колона с числа. Програмата трябва да генерира случайни числа в интервала от 1 до 2*числото от колона 1 на входния файл. В изходния файл който трябва да се казва "името на входния"_result.csv трябва да се изведат в колона 1 само по-големите от втория подаден аргумент числа от входния файл в колона 2 случайното число което сте генерирали и в колона 3 отношението на генерираното число към числото от входния файл с точност 10 знака след десетичната запетая като резултатът трябва да е сортиран в низходящ ред по колона 3.,random_task_test.rb
smartest_team,Да се създаде програма която приема като аргумент от командния ред име на csv файл с формат Колона 1 дата на работен ден на магазин в формат dd/mm/yyyy Колона 2 парите в касата с които магазинът започва да работи Колона 3 парите в касата с които магазинът затваря. Да се намерят дните с най-голям и най–малък оборот и в изходен csv файл с име "име на входния файл"_result.csv да се изведе в Колона 1 разликата мажду двата дена в брой дни в Колона 2 оборота на деня с най-малък оборот в Колона 3 оборота на деня с най-голям оборот и в Колона 4 разлита в обората между двата дни.,shop_task_test.rb
smartest_team,1. Даден е файла "countrylist.csv" с колони:  a. пореден номер  b. Държава с. тип d. Официално име 2. Да се реализира програма която приема като първи аргумент името на файла от командния ред. 3. Да се обработи документът като трябва да се открият всички редове за който колоната "тип" отговаря на описанието "Proto Independent State" и всички държави от колоната "Официално име" трябва да са Републики (Republic of...). 4. Цялата информация за всеки ред да се запише в изходения файл "country_results.csv" 5. Резултатът да е сортиран по колоната "пореден номер" във възходящ ред,country_task_test.rb
smartest_team,Да се създаде програма която взима като първи аргумент името на csv файл. Форматът на файла е 2 колони в Колона 1 име на ученик в Колона 2 неговият среден успех. Да се намерят хората които получават стипендии. В изходния файл с име "името на входния"_result.csv да се запишат в Колона 1 името на ученика в Колона 2 парите които получава съответно за успех: за 5.50-5.59 : 25 за 5.60-5.69 : 30 за 5.70-5.79 : 35 за 5.80-5.89 : 40 за 5.90-5.99 : 45 и за 6.00 : 50. Като резултатът трябва да е сортиран по КОЛОНА 2.,marks_task_test.rb
smartest_team,Даден е csv документ с 2 колони: 1.номер на автобус, 2.час и минута на пристигане във формат hh:mm. Да се реализира програма, която приема като първи аргумент името на csv файла от командния ред. Като втори аргумент е даден само часът на пристигане. Да се намерят всички автобусни линий и тяхното време на пристигане, пристигащи в този час.Резултатът да се запише във изходен файл с име "името на входния"_result.csv в Колона 1 номера на автобуса а в Колона 2 точния час на пристигане. Файлът да е сортиран по възходящ ред по КОЛОНА 1.,traffic_task_test.csv
smartest_team,1. Даден е файла "sales.csv"  с колони: a. Час на транзакция b. Сума на транзакция с. Тип плащане d. Държава в която е извършено плащането 2. Да се реализира програма която приема като първи аргумент името на файла от командния ред. 3. Да се обработи документът като трябва да се открият и запишат данните за всеки ред при който всеки "час на транзакция" е извършен в час и минути по малки или равни съответно на втория подаден аргумент. 4. Цялата информация за всеки ред да се запише в изходения файл "'име на входния'_results.csv" 5. Резултатът да е сортиран по колоната "Час на транзакция" във възходящ ред.,sales_task_test.rb
smartest_team,Даден е csv документ с random числа.Да се реализира програма, която приема като първи аргумент името на csv файла от командния ред. Като втори и трети аргумент са дадени началото и краят на обсега от числа, а като трети аргумент е дадена стойност, на която трябва да се делят числата в обсега. Файлът да е сортиран по възходящ ред по КОЛОНА 1.,delene_test.rb
smartest_team,Да се създаде програма която приема като първи аргумент име на csv файл. Файлът е с формат 4 колони в КОЛОНА 1 три-буквен код на валута в КОЛОНА 2 пълното наименование на валутата в КОЛОНА 3 един американски долар на колко от тази валута е равностоен и в КОЛОНА 4 единица от тази валута на колко американски долара е равностойна.Да се намерят всички редове за които валутата равна на един американски долар е по-малка от втория аргумент. Да се изведат всичките редове ако няма подаден трети аргумент но ако има да се изведе само редът на който кодът на валутата съвпада с аргументът. Резултатът да се запише в изходен csv файл с име "името на входния"_results.csv да е сортиран по колона 3 в възходящ ред.,currency_task_test.rb
PSBS_Solutions,Да се създаде програма която приема като аргумент от командния ред име на csv файл с формат Колона 1 дата на пътуване в формат dd/mm/yyyy Колона 2 брой на пътуващи хора Колона 3 печалба от билети.В изходен csv файл с име "име на входния файл"_result.csv да се изведе в Колона 1 датата с най-много пътуващи хора  в Колона 2 броя на пътуващите хора за деня в Колона 3 печалбата за деня в Колона 4  датата с най-малко пътуващи хора в Колона 5 броя на пътуващите хора за деня и в Колона 6 печалбата за деня.,transport_task_test.rb
PSBS_Solutions,Даден е csv документ. В него са записани имена на ученици дата която ни интересува и 0 или 1 според това дали са влизали в дадено помещение. Форматът на документа е Име Фамилия Дата 0/1. Да се създаде програма която взима като аргументи списъка на учениците и две дати. Двете дати оказват границите в които искаме да разберем кои са учениците които са влизали в помещението. Да се запише в csv документ всеки влизал ученик който е влизал в помещението и датата когато това се е случило. Изходният файл да е във формат Име Фамилия Дата,entrance_control_test.rb 
PSBS_Solutions,1.Даден е csv документ Apfg.csv с колони :- Име на отбора домакин във формат Име(Град)- Резултат- Име на отбора гост във формат Име(Град)- Номер на кръга- Дата на срещата 2. Да се реализира програма която приема като първи аргумент името на файла от командния ред.3.Резултатът да се запише в изходен файл #{input_file}_result.csv където “input_file” е името на входния файл без разширението му.Пример - при входен файл Apfg.csv изходният трябва да се казва Apfg_result.csv.4.От командния ред се подава втори аргумент-име на отбор Забележка : Само име без град.5.Да се обработи докъментът като се намерят всички срещи изиграни от този отбор.6.Информациятада се запише в изходния файл във формат: Първа колона : Домакит Резултат Гост Кръг.Втора колона : Дата на двубоя.7.Резултатът от програмата в изходния файл да бъде сортиран по Дата т.е колона 2 във низходящ ред.,Football_test.rb
PSBS_Solutions,1.Даден е csv документ Apfg.csv с колони :- Име на отбора домакин във формат Име(Град) - Резултат - Име на отбора гост във формат Име(Град) - Номер на кръга - Дата на срещата.2. Да се реализира програма която приема като първи аргумент името на файла от командния ред.3.Резултатът да се запише в изходен файл #{input_file}_result.csv където “input_file” е името на входния файл без разширението му.Пример - при входен файл Apfg.csv изходният трябва да се казва Apfg_result.csv.4.От командния ред се подава втори аргумент- номера на кръга Забележка: Само цифра!.5.Да се обработи докъментът като се намерят всички срещи изиграни от дадения кръг.6.Информацията да се запише в изходния файл във формат: Първа колона : Домакит Резултат Гост Кръг.Втора колона : Дата на двубоя.7.Резултатът от програмата в изходния файл да бъде сортиран по Дата т.е колона 2 във низходящ ред.,Football2_test.rb
PSBS_Solutions,Даден е csv документ zad_2.csv с колони: име и номер. Да се реализира програма която приема като първи аргумент името на файла от командния ред а като втори цифрата 2. Резултатът да се запише в изходен файл zad_2_result.csv като се умножат по ваведената като аргумент стойност 2 стойностите от втора колона а фаила да се сортира по нея.,zad_2_test.rb
PSBS_Solutions,Даден е csv документ bank.csv с колони: име възраст клас. Да се реализира програма която приема като първи аргумент името на файла от командния ред. Да се запишат на изходен файл result.csv само редовете на които колоната "име" съдържа char въведен като 2-ри аргумент и да се сортират по първата колона във възходящ ред., Az1_test.rb
AirFap-OP,Даден е csv документ (champs.csv) с колони: -Име -Клас -Дата -Цена. Да се реализира програма, която приема като първи аргумент името на csv файла от командния ред. Програмата да е с име FirstName_LastName_1.rb. Резултатът да се запише в изходен файл #{input_file)_result.csv. Като втори аргумент е даден примерен -Клас. Да се обработи документът като се открият всички редове, в които класът съвпада точно с дадения. Да се запише следната информация в две колони: -Име -Цена, като резултата е сортиран по колоната -Цена във възходящ ред. Колоната -Име трябва да бъде преработена така, че да изглежда като нормално име.,master_test.rb
AirFap-OP,Даден е csv документ (champs.csv) с колони: -Име -Клас -Дата -Цена. Да се реализира програма, която приема като първи аргумент името на csv файла от командния ред. Програмата да е с име FirstName_LastName_2.rb. Резултатът да се запише в изходен файл #{input_file)_result.csv. Като втори аргумент е даден примерен -Клас. Да се обработи документът като се открият всички редове, в които подаденият като аргумент -Клас се съдържа в колоната. Да се запише следната информация в две колони: -Име -Цена, като резултата е сортиран по колоната -Име по азбучен ред. Колоната -Име трябва да бъде преработена така, че да изглежда като нормално име.,master_test.rb
AirFap-OP,Даден е csv документ (champs.csv) с колони: -Име -Клас -Дата -Цена. Да се реализира програма, която приема като първи аргумент името на csv файла от командния ред. Програмата да е с име FirstName_LastName_3.rb. Резултатът да се запише в изходен файл #{input_file)_result.csv. Като втори аргумент е дадена дата във формат ГГГГ-ММ-ДД. Да се обработи документът като се открият всички редове, за които датата е по.малка от дадената. Да се запише следната информация в две колони: -Име -Клас, като резултата е сортиран по колоната -Клас във низходящ ред. Колоната -Име трябва да бъде преработена така, че да изглежда като нормално име.,master_test.rb
AirFap-OP,Даден е csv документ (champs.csv) с колони: -Име -Клас -Дата -Цена. Да се реализира програма, която приема като първи аргумент името на csv файла от командния ред. Програмата да е с име FirstName_LastName_4.rb. Резултатът да се запише в изходен файл #{input_file)_result.csv. Като втори аргумент е дадена примерна цена. Да се обработи документът като се открият всички редове, в които цената съвпада с подадената. Да се запише цялата информация като резултата е сортиран по колоната -Клас във възходящ ред. Колоната -Име трябва да бъде преработена така, че да изглежда като нормално име. Колоната -Дата трябва да бъде преработена така, че да изгледжа като нормална дата във формат ГГГГ-ММ-ДД.,master_test.rb
AirFap-OP,Даден е csv документ (champs.csv) с колони: -Име -Клас -Дата -Цена. Да се реализира програма, която приема като първи аргумент името на csv файла от командния ред. Програмата да е с име FirstName_LastName_5.rb. Резултатът да се запише в изходен файл #{input_file)_result.csv. Като втори аргумент е дадена буква. Да се обработи документът като се открият всички редове, в които името на героя завършва на дадената буква. Да се запише следната информация в две колони: -Име -Клас, като резултата е сортиран по колоната -Име от 'Z' към 'A'. Колоната -Име трябва да бъде преработена така, че да изглежда като нормално име.,master_test.rb
AirFap-OP,Даден е csv документ (champs.csv) с колони: -Име -Клас -Дата -Цена. Да се реализира програма, която приема като първи аргумент името на csv файла от командния ред. Програмата да е с име FirstName_LastName_6.rb. Резултатът да се запише в изходен файл #{input_file)_result.csv. Като втори аргумент е дадена буква. Да се обработи документът като се открият всички редове, в които името на героя съдържа дадената буква. Да се запише следната информация в две колони: -Име -БройНаБуквата, като резултата е сортиран по колоната -Име по азбучен ред. Колоната -Име трябва да бъде преработена така, че да изглежда като нормално име.,master_test.rb
AirFap-OP,Даден е csv документ (champs.csv) с колони: -Име -Клас -Дата -Цена. Да се реализира програма, която приема като първи аргумент името на csv файла от командния ред. Програмата да е с име FirstName_LastName_7.rb. Резултатът да се запише в изходен файл #{input_file)_result.csv. Да се обработи документът като се открият първият и последният излязъл герой (най-малка и най-голяма дата). Да се запишат двата открити реда с две колони -Име и -Дата, като резултата е сортиран по колоната -Дата във възходящ ред. Колоната -Име трябва да бъде преработена така, че да изглежда като нормално име. Колоната -Дата трябва да бъде преработена така, че да изгледжа като нормална дата във формат ГГГГ-ММ-ДД.,master_test.rb
AirFap-OP,Task 8: От randnums.csv (randnums.csv има две колони цели,естествени числа) да се намери сборът на всички числа във него. Ако сборът е четно число да се вземат всички четни номера на влакове от trains.csv, ако е нечетно - всички нечетни. След това в csv файл да се запишат само тези влакове,които изминават повече от 200 км, сортирани по време на тръгване и във възходящ ред, и да се редектира така, че да са Human readable(да се премахнат ненужни разстояния,долни черти и т.н).,Master_tester2.rb
AirFap-OP,Task 9: От randnums.csv (randnums.csv има две колони цели,естествени числа) да се вземат първите десет реда числа. Да се сумират по колони.След това да се извади резултата от сумирането на първата колона с този на втората.Програмата да вземе аргумет - число - от командния ред. Ако числото е по-голямо от получения резултат при изваждането на сборовете на колоните да се сортират по станция на тръгване , ако не е - по разстоянието , което изминават и да се запишат в csv файл, и да се редектира така, че да са Human readable(да се премахнат ненужни разстояния,долни черти и т.н).Сортирането да е по възходяш ред.,Master_tester2.rb
AirFap-OP,Task 10: От trains.csv (trains.csv изглежда така - първа колона - номер на влак, втора колона - от къде тръгва,трета колона - час на тръгване формат час:минути, четвърта колона - какво разстояние изминава,пета колона - колко време му отнема пътуването формат час:минути, шеста колона - цена на билета) да се вземат само редовете с влакове,чиито влакове тръгват от Централна гара. Да се намери кои влакове имат най-добро отношение изминат път към цена на билета. В csv файл да се запишат само номерата на трите влака,които са с най-добро отношение изминат път към цена на билета,подредени по низходящ ред.,Master_tester2.rb
AirFap-OP,Task 11: От trains.csv (trains.csv изглежда така - първа колона - номер на влак, втора колона - от къде тръгва,трета колона - час на тръгване формат час:минути, четвърта колона - какво разстояние изминава,пета колона - колко време му отнема пътуването формат час:минути, шеста колона - цена на билета) да се намери кога всеки влак ще пристигне на крайната си спирка.В csv файл да се запише от къде тръгва влака и в колко ще пристигне на крайната си спирка само за влаковете, които ще пристигнат преди 16:00.,Master_tester2.rb
AirFap-OP,Task 12: От trains.csv (trains.csv изглежда така - първа колона - номер на влак, втора колона - от къде тръгва,трета колона - час на тръгване формат час:минути, четвърта колона - какво разстояние изминава,пета колона - колко време му отнема пътуването формат час:минути, шеста колона - цена на билета) да се намери сборът на цени на билети, сборът на времето на пътуване и разстоянието,което изминават всички влаковете.От randnums.csv да се вземе първото число на 7-ми ред. Ако е просто да се запише във csv файл сборът на времето на пътуване на всички влакове и сбора на цените на билетите на всички влакове,ако не е във csv файл-а да се запише сборът на разстояниета, които влаковете изминават и сбора на цените на билетите на всички.,Master_tester2.rb
LazyGenerators,"========Задача 1=======

Да се създаде програма за проверяване на правописа.
На стандартния вход да се подаде името на файла за проверка.
Да се създаде изходен файл results.csv, който да съдържа сгрешените думи във формат:
ред във файла на съответната дума, самата дума, за кой път се среща 

За улеснение да приемем, че единствените препинателни знаци са , и .
Aко целия текст е верен, results.csv трябва да е празен файл.
Думите се извеждат във реда във който се срещат във файла.

Пример: ruby english_1.rb text.txt",test_zadacha_1.rb
LazyGenerators,"========Задача 2=======

Да се създаде програма за превод от американски до британски английски.
На стандартния вход да се подаде името на файла за превод.
Резултата да се изведе на стандартния изход.

За улеснение да приемем, че единствените препинателни знаци са , и .

Използвайте dictionary.txt.

Пример: ruby english_2.rb text.txt",test_zadacha_2.rb
LazyGenerators,"========Задача 3=======
На командния ред се подава csv файл, съдържащ следните полета:
Играч ID, резултат, най-висок резултат, игри, напуснати игри, победи, загуби, равно завършили игри, убити герои, брой умирания, асистенции, убити противникови чудовища, помилвани чудовища, убити неутрални чудовища

Да се състави програма, която намира петимата играчи с най-висок резултат в момента и тяхната статистика да се запише във нов файл, с името ""top.csv"". Играчите трябва да са сортирани по своя резултат във низходящ ред. В случай, че има двама с еднакъв резултат, то сортирането става по ID (също в низходящ ред).
При наличието на втори аргумент, файлът трябва да съръжа не 5, а колкото е указано като аргумент брой играчи.
В случай, че входният файл съдържа по-малко от указания брой играчи, то резултата трябва да съдържа всички играчи, отново сортирани.
",test_task_3.rb
LazyGenerators,"========Задача 4=======
На командния ред се подава csv файл, съдържащ следните полета (всяко поле е цяло число):
Играч ID, резултат, най-висок резултат, игри, напуснати игри, победи, загуби, равно завършили игри, убити герои, брой умирания, асистенции, убити противникови чудовища, помилвани чудовища, убити неутрални чудовища

Да се състави програма, която по даден ID на играч, намира петимата играчи преди него и петимата играчи след него в класацията.
Програмата трябва да състави файл (името се подава като аргумент), който съдържа единадесетте играчи с тяхната статистика, подредени по резултат. Ако двама играчи имат един и същ резултат, то подредбата е по ID. Подредбата е във възходящ ред
В случай, че няма играч с указаното ID, то файлът трябва да е празен.
В случай, че входният файл съдържа недостатъчно на брой играчи, то изходният файл трябва да съдържа всички играчи, в съответната подредба.
",test_task_4.rb

MartoFTW,Даден е CSV файл описващ плейлиста. Форматът е песен/изпълнител/жанр/времетраене.От командния ред като първи аргумент се подава playlist_input.csv, а като втори жанр. Да се намерят всички редове с песни в дадения жанр и да се изведът в нов файл на име playlist_task1_result.csv сортирани по времетраене(възходящ ред).,playlist_task1_test.rb
MartoFTW,Даден е CSV файл описващ плейлиста. Форматът е песен/изпълнител/жанр/времетраене.От командния ред като първи аргумент се подава playlist_input.csv, а като втори изпълнител. Да се намерят всички редове с песни на въведения изпълнител, които са по кратки от 4 мин. Да се изведът във нов файл на име playlist_task2_result.csv сортирани по времетраене(низходящ ред).,playlist_task2_test.rb
MartoFTW,Даден е CSV документ описващ работата в автосервиз.Форматът е дата/марка/цена_на_услуга/име_на_майстор. От командния ред се въвежда input файл (ARGV[0]) и име на марка (ARGV[1]). Да се намерят всички ремонти на определена марка автомобил (пример Renault), да се сортират по цена на услугата(възходящ ред) и да се запишат във изходен файл на име auto_task1_result.csv.,auto_task1_test.rb
MartoFTW,Даден е CSV документ описващ стоката в магазин. Форматът е продукт/производител/цена/срок_на_годност. От командния ред се въвежда input файл (ARGV[0]) и име на производител(ARGV[1]). Да се намери всеки продукт(ред) предлаган от въведения производител. Информацията да се сортира по цена на продукта(низходящ ред) и да се запише в изходен файл на име shop_task1_result.csv .,shop_task1_test.rb
MartoFTW,Даден е CSV документ описващ стоката в магазин. Форматът е продукт/производител/цена/срок_на_годност. От командния ред се въвежда input файл (ARGV[0]) и дата(ARGV[1]). Всички продукти(редове), които са с изтекъл срок на годност да се запишат в изходен файл, сортирани по име на производител(възходящ ред). Името на файла да е shop_task2_result.csv .,shop_task2_test.rb
MartoFTW,Даден е CSV файл описващ физическите данни на хора. Форматът е Име/Ръст/Тегло/Години.Да се намерят всички хора под дадени килограми. Като първи аргумент се подава people_input.csv, а като втори тегло без мерна единица. Всички редове с хора, които са под нормата да се запишат в people_task1_result.csv, сортирани по азбучен ред.,people_task1_test.rb
MartoFTW,Даден е CSV файл описващ физическите данни на хора. Форматът е Име/Ръст/Тегло/Години.Да се намерят всички хора по високи от даден ръст. Като първи аргумент се подава people_input.csv, а като втори ръст. Всички редове с хора, които са над този ръст или равни се записват в people_task2_result.csv, сортирани по години в низходящ ред.,people_task2_test.rb
LazyGenerators,"========Задача 5=======
На командния ред се подава csv файл, съдържащ следните полета:
Играч ID, резултат, най-висок резултат, игри, напуснати игри, победи, загуби, равно завършили игри, убити герои, брой умирания, асистенции, убити противникови чудовища, помилвани чудовища, убити неутрални чудовища

Играчите трябва да се филтрират по следния начин: Ако резултатът на играча е по-висок (или равен) от средния за всички, то този играч трябва да присъства във първия файл, в противен случай - във втория.
Имената на файловете се приемат като аргументи.
Играчите трябва да присъстват във изходните файлове, само със своето ID, резултат и най-висок резултат.
В случай, че има играчи с еднакъв резултат, то сортирането става по техният най-висок резултат. В случай, че и това съвпада, то сортирането е по ID.
Играчите във първия файл са сортирани във низходящ ред. Тези във втория файл - във възходящ ред.
",test_task_5.rb
LazyGenerators,"========Задача 6=======
На командния ред се подава csv файл, съдържащ следните полета:
Играч ID, резултат, най-висок резултат, игри, напуснати игри, победи, загуби, равно завършили игри, убити герои, брой умирания, асистенции, убити противникови чудовища, помилвани чудовища, убити неутрални чудовища

Да се състави програма, която намира грешки във записите за отделен играч.
Счита се, че има грешка, когато броят на игрите е различен от сумата на победите, загубите и равно завършилите игри.
Резултатът трябва да е csv файл (името се подава като аргумент). Файлът трябва да съдържа ID-то на играча, игрите според файла, победите, загубите, равно завършилите игри, сумата от предходните три, отклонението от стойността (реален брой игри - игри според файла).
В случай, че за даден играч отклонението е 0, то той не трябва да присъства във изходния файл.
Записите в изходния файл са в реда, в който са открити във входния.
",test_task_6.rb

MartoFTW, Имаме CSV файл, описващ лаптопи. Форматът е марка,процесор,брой ядра,RAM,HDD,цена.От командния ред се въвежда като първи аргумент laptops.csv, а втори марка на лаптоп. 
Намират се всички редове за тази марка и се извеждат в изходен файл с име laptops_brand_result.csv, сортирани по цена(възходящ ред).,test_laptops_brand.rb
MartoFTW,Имаме CSV файл, описващ лаптопи. Форматът е марка,процесор,брой ядра,RAM,HDD,цена.От командния ред се въвежда като първи аргумент laptops.csv, а като втори размер на RAM памет (пример 2 или 16). 
Намират се всички редове с лапотпи имащи този размер памет и се извеждат в изходен файл на име laptops_ram_result.csv, сортирани по име на марката(възходящ ред).,test_laptops_ram.rb
MartoFTW,Имаме CSV файл, описващ лаптопи. Форматът е марка,процесор,брой ядра,RAM,HDD,цена.От командния ред се въвежда като първи аргумент laptops.csv, а като втори размер на HDD (пример 250 или 1000). 
Намират си всички лаптопи с този размер памет  и се извеждат в изхозен файл на име laptops_hdd_result.csv, сортирани по цена(низходящ ред).,test_laptops_hdd.rb
MartoFTW,Имаме CSV файл, описващ лаптопи. Форматът е марка,процесор,брой ядра,RAM,HDD,цена.От командния ред се въвежда като първи аргумент laptops.csv, а като втори име на процесор(пример AMD). Също така програмата не трябва да е case sensitive, т.е. "InTEl" и "iNtEL" са едно и също нещо. 
Да се открият всички редове с лаптопи използващи въведения процесор и се извеждат в изхозен файл на име laptops_processor_result.csv, сортирани по брой ядра(възходящ ред).,test_laptops_processor.rb
MartoFTW,Имаме CSV файл, описващ лаптопи. Форматът е марка,процесор,брой ядра,RAM,HDD,цена.От командния ред се въвежда като първи аргумент laptops.csv, а като втори цена(пример 200 или 1200). 
Да се открият и запишат всички редове съдържащи лаптопи с цена равна или по-голяма от въведенатаи се извеждат в изхозен файл на име laptops_price_result.csv,сортирани по цена(възходящ ред).,test_laptops_price.rb
MartoFTW,laptops_quantity,test_Имаме CSV файл, описващ лаптопи. Форматът е марка,процесор,брой ядра,RAM,HDD,цена.От командния ред се въвежда като първи аргумент laptops.csv.Да се открият и запишат всички марки и бройки лаптопи с тази марка(пример Acer,2 или Apple,6) и да се запишат в laptops_quantity_result.csv под формата на [Марка,бройка], сортирани по марката във възходящ ред.,test_laptops_quantity.rb

Logicless, 1. Да се въведат от командния ред 2 целочислени числа. Да се намерят всички редове за които възрастта е между тези 2 числа вкючително. Да се сортират във възходящ ред спрямо възрастта и да се запишат във файл с име dogfest_age_res.csv
Logicless, 2. От командния ред да се въведе порода куче. Да се намерят всички кучета с тази порода от файла dogfest.csv и да се запишат в файл с име dogfest_breeds_res.csv
Logicless, 3. От командния ред да се въведат като 1ви аргумент:Първо име на собственик, като 2ри аргумент: настояща година. Да се намерят всички собственици с това 1во име и да се запишат пълните им имена в файл с име: dogfest_owners_res.csv
               и да се сметне година на раждане на кучето.
Logicless, cars_task_1 --> Има един csv файл с данни за автомобили с техните регистрационни номера, модел, марка и година на производство. Да се въведе от командния ред модел на автомобил и на отделен файл да бъде изписан броя на автомобилите от този модел ако има такива.
Logicless, cars_task_2 --> Има един csv файл с данни за автомобили с техните регистрационни номера, модел, марка и година на производство. Да се въведе от командния ред произволна година и на отделен файл да бъде изписан броя на автомобилите преди тази година и броя на автомобилите след (и включително) тази година.
Logicless, cars_task_3 --> Има един csv файл с данни за автомобили с техните регистрационни номера, модел, марка и година на производство. Да се въведат от командния ред името на файла, който ще бъде парснат, и първия/първите два символа на рег. номер. Всички автомобили отговарящи на това изискване да бъдат записани в отделен csv файл с всичките им данни като на първия ред да бъде изписано името на града откъдето тия коли са регистрирани.

LazyGenerators,"========Задача 7=======
На командния ред се подава csv файл, съдържащ следните полета:
Играч ID, резултат, най-висок резултат, игри, напуснати игри, победи, загуби, равно завършили игри, убити герои, брой умирания, асистенции, убити противникови чудовища, помилвани чудовища, убити неутрални чудовища

Даден е файл със 10000 записа. Трябва да се организира турнир от 16 отбора. Всеки отбор е съставен от петима играчи.
Изборът на играчите е свободен.
Програмата се счита за изпълнена ако средно аритметичните резултати на 16-те отбора не се отличават с повече от 10 точки.
Резултатът от програмата е csv файл, съдържащ ID-та на избраните играчи. Всеки запис от файла трябва да съдържа 5 ID-та и техният среден резултат. Файлът трябва да има 16 записа. Името на файла се приема като аргумент.
",test_task_7.rb
MartoFTW,Дадан е CSV файл.Форматът е име/години/квартал/сама или заета/телефон. Като първи аргумент от командния ред се въвежда girl.csv, а като втори дали е сама или заета. Целта е да се изведът всички момичета, които са сами или заети сортирани по възраст. Изходният файл да се казва momicheta_result.csv,momicheta_test.rb
MartoFTW,Даден е файл. В него има инфорамция за концерти в София през 2014г. Дадени са следните колони:-група/жанр/държава/цени/стадион/дата. въвеждаме от командния ред като първи аргумент  stadion.csv, като втори Държава и се извеждат всички редове, които съдържат тази държава във файла country_result.csv  подредени по азбучен ред по име на изпълнителя.,country_test.rb
MartoFTW,Даден е файл. В него има инфорамция за концерти в София през 2014г. Дадени са следните колони:-група/жанр/държава/цени/стадион/дата.въвеждаме от командния ред като първи аргумент stadion.csv, като втори цена (пример 23) да се изведат всички редове които съдържат тази цена във файла price_result.csv , подредени по обратен азбучен ред,price_test.eb
The_Four_Horsemen,"Задача 1: Съставете програма, която смята средно аритмитично на оценките на ученик
Като входен файл имаме файл, подаден като аргумент
1-ва колона - Клас на ученика
2-ра колона - Име на ученика
3-та колона - Фамилия на ученика
4-та - N-та колона - оценки на ученика

Да се сметне средното аритмитично на оценките на всеки ученик и да се запише в изходния файл, който се подава като аргумент.
1-ва колона - ПървоИме Фамилия на ученика
2-ра колона - Средно аритмитично, до 2-ри знак след запетаята

Резултата да се изведе по низходящ ред спрямо средното аритмитично

Програмата ви да се казва - ПървоИме_Фамилия_НомерНаЗадача.rb",test.rb
The_Four_Horsemen,"Задача 2: Съставете програма, която смята дали даден ученик ще остане на поправка по някой предмет
Като входен файл имаме файл, подаден като аргумент
1-ва колона - Клас на ученика
2-ра колона - Име на ученика
3-та колона - Фамилия на ученика
4-та - N-та колона - оценки на ученика

Да се намери дали човека имам двойка по някой предмет(остава на поправка)
Името на изходния файл се подава като аргумент. Той трябва да съдържа:
1-ва колона - ПървоИме Фамилия на ученика
2-ра колона - Yes - Ако е на поправка, No - Ако не е на поправка

Резултата да се подреди по азбучен ред спрямо името на ученика

Програмата ви да се казва - ПървоИме_Фамилия_НомерНаЗадача.rb",test.rb
The_Four_Horsemen,"Задача 3: Съставете програма, която извежда учениците от даден клас
Имаме 2 подадени аргумента:
1. Входния файл, от който се взима информация
2. Класа, от който искаме да изведем учениците

Във входния файл имаме
1-ва колона - Клас на ученика
2-ра колона - Име на ученика
3-та колона - Фамилия на ученика
4-та - N-та колона - оценки на ученика

Да се изведът всички ученици от подадения като аргумент клас във формата:  
1-ва колона - Класа
2-ра колона - ПървоИме Фамилия на ученика

Резултата да се сортира по азбучен ред спрямо името на ученика

Програмата ви да се казва - ПървоИме_Фамилия_НомерНаЗадача.rb",test.rb
The_Four_Horsemen," Задача 4: Имаме входния файл подаден като аргумент, в който имаме
1-ва колона - Клас на ученика
2-ра колона - Име на ученика
3-та колона - Фамилия на ученика
4-та - N-та колона - оценки на ученика

Да се пресметне средно аритмитично на всеки ученик и да се изведът всички ученици с еднакъв успех на един ред във изходния файл, подаден като аргумент
В него имаме:  
1-ва колона - Средното аритмитично
2-ра до N-та колона - Имената на хората с еднкъв успех разделени със запетая

Резултата да се сортира в низходящ ред, спрямо успеха

Програмата ви да се казва - ПървоИме_Фамилия_НомерНаЗадача.rb",test.rb
The_Four_Horsemen,"Задача 5: Да се състави задача, която извежда магазините, в които има даден продукт, подаден като аргумент и цената на продукта

Подават се 3 аргумента!
1-ви аргумент - входния файл
2-ри аргумент - дадения продукт, който трябва да се изведе
3-ти аргумент - изходния файл

Във входния файл имаме:
1-ва колона - Име на продукт
2-ра колона - Цена на продукта
3-та колана - Магазина, в който има дадения продукт

Във изходния файл трябва да имаме:
1-ва колона - Магазина, в който го има продукта
2-та колона - Цената на дадения продукт в този магазин

Изходния файл да се сортира по възходящ ред, спрямо цената

Програмата ви да се казва - ПървоИме_Фамилия_НомерНаЗадача.rb",test.rb
The_Four_Horsemen,"Задача 6: Да се състави задача, която извежда всички продукти в даден магазин, подаден като аргумент

Подават се 3 аргумента!
1-ви аргумент - входния файл
2-ри аргумент - име на магазин
3-ти аргумент - изходния файл

Във входния файл имаме:
1-ва колона - Име на продукт
2-ра колона - Цена на продукта
3-та колана - Магазина, в който има дадения продукт

Да се изведът всички продукти, в даден магазин:
1-ва колона - Продукта
2-ра колона - Цената

Изходния файл да се сортира по азбучен ред, спрямо името на продукта

Програмата ви да се казва - ПървоИме_Фамилия_НомерНаЗадача.rb",test.rb
The_Four_Horsemen,"Задача 7: Като аргумент е подадено името на файл, в който има:
1. Име на файл
2. Дата на създаване, във формат ДД/ММ/ГГГГ
3. Размер на файла, в kB

Да се изведът всички файлове, създадени на подадената като аргумент дата
Изходният файл трябва да носи името на третия подаден аргумент и да съдържа:
1-ва колона - датата на създаване на файла
2-ва колона - името на файла
3-та колона - размера на файла

Резултата да е подреден във възходящ ред спрямо размера на файла.

Програмата ви да се казва - ПървоИме_Фамилия_НомерНаЗадача.rb",test.rb
The_Four_Horsemen,"Задача 8: Даден е файл Task_8_input.csv, в който има:
1. Име на файл
2. Дата на създаване, във формат ДД/ММ/ГГГГ
3. Размер на файла, в kB

Като аргумент имаме разширение на файл(.exe, .csv, .txt, .c, ...)

Да се изведът всички файлове с това разширение
И да се сортира по възходящ ред спрямо размера на файла

Програмата ви да се казва - ПървоИме_Фамилия_НомерНаЗадача.rb",test.rb
The_Four_Horsemen,"Задача 9: Като първи аргумент е подаден csv файл, съдържащ 2 колони:
1. Username
2. Парола

Като втори аргумент е подаден csv файл, съдържащ списък със слаби пароли, разделени със запетая

Да се създаде wrong.csv с 2 колони:
1-ва колона: Username на човека с грешна парола
2-ра колона: TOO SHORT, ако паролата е по-къса от 6 знака и TOO WEAK, ако паролата се среща в списъка със слаби пароли.

Хората с достатъчно дълги пароли, които не се срещат в списъка със слаби пароли не присъстват в wrong.csv!

Програмата ви да се казва - ПървоИме_Фамилия_НомерНаЗадача.rb",test.rb
Code_Geass,1.Да се направи програма, която отваря Dota_heroes.csv, и по даден първи аргумент за афилация(Radiant/Dire)и втори аргумент за статус(Released/Unreleased), взима първите десет героя със дадената афилация и атрибут, сортира ги по азбучен ред и ги записва в csv file с името Dota_task1_output.csv.
Code_Geass,2.Да се отвори Dota.csv, като аргумент се подава primary stat(STR/AGI/INT) събира armor-a на всички герои с този primary stat, чиито MS е по голям от 290.Изписва отговора в аутпут файла Dota_task3_output.csv
Code_Geass,3.Да се направи програма, която чете от Dota_heroes.csv и записва в output csv file Dota_task2_output.csv.4 колони.В първата колона всички radiant герои, във втората всички dire герои, в третата всички released герои, в четвъртата - всички unreleased герои.
Code_Geass,4.Да се направи програма, която отваря Dota.csv.Записва резултата в Dota_task4_output.csv.От всички герои с primary stat,подаден като аргумент(INT/STR/AGI) да се намери героят с най-висок MS,най-много HP,най-много armor.В output-a трябва да има три реда с по три стойности.Име, дисциплина(HP/MS/Armor),стойност.Ако има няколко героя с най-високо HP/ARMOR/MS в дадена дисциплина, да бъде изписан първият герой, който намери програмата. На края output-a трябва да е сортиран по азбучен ред на имената на героите.
Code_Geass,5.Отваря се Dota.csv и се записва в формат Firstname_Lastname_task5_output.csv.Да се намерят първите 5 героя с по-малко DMG от DMG-a на героя подаден от командният ред(името е подадено, пример:Chen).В output-a трябва да бъдат изписани тези 5 героя на 5 реда, заедно със стойността на DMG-а им сортирани в низходящ ред.
Code_Geass,6.Отваря се Dota.csv и се записва в Dota_task6_output.csv.Да се намерят героите, които имат повече от 1 име(пример: Crystal Maiden), които имат Primary stat INT, чиято мана е повече от стойност зададена като аргумент. В output-a се изписват имената на героите и стойностите им на mana, сортирани по мана.
