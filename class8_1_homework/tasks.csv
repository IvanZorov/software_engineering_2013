smartest_team,Да се създаде програма която приема име на csv файл като аргумент 1. Файлът е в формат една колона с числа. Програмата трябва да генерира случайни числа в интервала от 1 до 2*числото от колона 1 на входния файл. В изходния файл който трябва да се казва "името на входния"_result.csv трябва да се изведат в колона 1 само по-големите от втория подаден аргумент числа от входния файл в колона 2 случайното число което сте генерирали и в колона 3 отношението на генерираното число към числото от входния файл с точност 10 знака след десетичната запетая като резултатът трябва да е сортиран в низходящ ред по колона 3.,random_task_test.rb
smartest_team,Да се създаде програма която приема като аргумент от командния ред име на csv файл с формат Колона 1 дата на работен ден на магазин в формат dd/mm/yyyy Колона 2 парите в касата с които магазинът започва да работи Колона 3 парите в касата с които магазинът затваря. Да се намерят дните с най-голям и най–малък оборот и в изходен csv файл с име "име на входния файл"_result.csv да се изведе в Колона 1 разликата мажду двата дена в брой дни в Колона 2 оборота на деня с най-малък оборот в Колона 3 оборота на деня с най-голям оборот и в Колона 4 разлита в обората между двата дни.,shop_task_test.rb
smartest_team,1. Даден е файла "countrylist.csv" с колони:  a. пореден номер  b. Държава с. тип d. Официално име 2. Да се реализира програма която приема като първи аргумент името на файла от командния ред. 3. Да се обработи документът като трябва да се открият всички редове за който колоната "тип" отговаря на описанието "Proto Independent State" и всички държави от колоната "Официално име" трябва да са Републики (Republic of...). 4. Цялата информация за всеки ред да се запише в изходения файл "country_results.csv" 5. Резултатът да е сортиран по колоната "пореден номер" във възходящ ред,country_task_test.rb
PSBS_Solutions,Да се създаде програма която приема като аргумент от командния ред име на csv файл с формат Колона 1 дата на пътуване в формат dd/mm/yyyy Колона 2 брой на пътуващи хора Колона 3 печалба от билети.В изходен csv файл с име "име на входния файл"_result.csv да се изведе в Колона 1 датата с най-много пътуващи хора  в Колона 2 броя на пътуващите хора за деня в Колона 3 печалбата за деня в Колона 4  датата с най-малко пътуващи хора в Колона 5 броя на пътуващите хора за деня и в Колона 6 печалбата за деня.,transport_task_test.rb
PSBS_Solutions,Даден е csv документ. В него са записани имена на ученици, дата, която ни интересува и 0 или 1 според това дали са влизали в дадено помещение. Форматът на документа е Име,Фамилия,Дата,0/1. Да се създаде програма, която взима като аргументи списъка на учениците и две дати. Двете дати оказват границите, в които искаме да разберем кои са учениците, които са влизали в помещението. Да се запише в csv документ всеки влизал ученик, който е влизал в помещението и датата, когато това се е случило. Изходният файл да е във формат Име Фамилия,Дата.
AirFap-OP,Даден е csv документ с колони: -Име -Клас -Дата -Цена. Да се реализира програма, която приема като първи аргумент името на csv файла от командния ред. Програмата да е с име FirstName_LastName_1.rb. Резултатът да се запише в изходен файл #{input_file)_result.csv. Като втори аргумент е даден примерен -Клас. Да се обработи документът като се открият всички редове, в които класът съвпада точно с дадения. Да се запише следната информация в две колони: -Име -Цена, като резултата е сортиран по колоната -Цена във възходящ ред. Колоната -Име трябва да бъде преработена така, че да изглежда като нормално име.,master_test.rb
AirFap-OP,Даден е csv документ с колони: -Име -Клас -Дата -Цена. Да се реализира програма, която приема като първи аргумент името на csv файла от командния ред. Програмата да е с име FirstName_LastName_2.rb. Резултатът да се запише в изходен файл #{input_file)_result.csv. Като втори аргумент е даден примерен -Клас. Да се обработи документът като се открият всички редове, в които подаденият като аргумент -Клас се съдържа в колоната. Да се запише следната информация в две колони: -Име -Цена, като резултата е сортиран по колоната -Име по азбучен ред. Колоната -Име трябва да бъде преработена така, че да изглежда като нормално име.,master_test.rb
AirFap-OP,Даден е csv документ с колони: -Име -Клас -Дата -Цена. Да се реализира програма, която приема като първи аргумент името на csv файла от командния ред. Програмата да е с име FirstName_LastName_3.rb. Резултатът да се запише в изходен файл #{input_file)_result.csv. Като втори аргумент е дадена дата във формат ГГГГ-ММ-ДД. Да се обработи документът като се открият всички редове, за които датата е по.малка от дадената. Да се запише следната информация в две колони: -Име -Клас, като резултата е сортиран по колоната -Клас във низходящ ред. Колоната -Име трябва да бъде преработена така, че да изглежда като нормално име.,master_test.rb
AirFap-OP,Даден е csv документ с колони: -Име -Клас -Дата -Цена. Да се реализира програма, която приема като първи аргумент името на csv файла от командния ред. Програмата да е с име FirstName_LastName_4.rb. Резултатът да се запише в изходен файл #{input_file)_result.csv. Като втори аргумент е дадена примерна цена. Да се обработи документът като се открият всички редове, в които цената съвпада с подадената. Да се запише цялата информация като резултата е сортиран по колоната -Клас във възходящ ред. Колоната -Име трябва да бъде преработена така, че да изглежда като нормално име. Колоната -Дата трябва да бъде преработена така, че да изгледжа като нормална дата във формат ГГГГ-ММ-ДД.,master_test.rb
AirFap-OP,Даден е csv документ с колони: -Име -Клас -Дата -Цена. Да се реализира програма, която приема като първи аргумент името на csv файла от командния ред. Програмата да е с име FirstName_LastName_5.rb. Резултатът да се запише в изходен файл #{input_file)_result.csv. Като втори аргумент е дадена буква. Да се обработи документът като се открият всички редове, в които името на героя завършва на дадената буква. Да се запише следната информация в две колони: -Име -Клас, като резултата е сортиран по колоната -Име от 'Z' към 'A'. Колоната -Име трябва да бъде преработена така, че да изглежда като нормално име.,master_test.rb
AirFap-OP,Даден е csv документ с колони: -Име -Клас -Дата -Цена. Да се реализира програма, която приема като първи аргумент името на csv файла от командния ред. Програмата да е с име FirstName_LastName_6.rb. Резултатът да се запише в изходен файл #{input_file)_result.csv. Като втори аргумент е дадена буква. Да се обработи документът като се открият всички редове, в които името на героя съдържа дадената буква. Да се запише следната информация в две колони: -Име -БройНаБуквата, като резултата е сортиран по колоната -Име по азбучен ред. Колоната -Име трябва да бъде преработена така, че да изглежда като нормално име.,master_test.rb
AirFap-OP,Даден е csv документ с колони: -Име -Клас -Дата -Цена. Да се реализира програма, която приема като първи аргумент името на csv файла от командния ред. Програмата да е с име FirstName_LastName_7.rb. Резултатът да се запише в изходен файл #{input_file)_result.csv. Да се обработи документът като се открият първият и последният излязъл герой (най-малка и най-голяма дата). Да се запишат двата открити реда с две колони -Име и -Дата, като резултата е сортиран по колоната -Дата във възходящ ред. Колоната -Име трябва да бъде преработена така, че да изглежда като нормално име. Колоната -Дата трябва да бъде преработена така, че да изгледжа като нормална дата във формат ГГГГ-ММ-ДД.,master_test.rb
LazyGenerators,"========Задача 1=======

Да се създаде програма за проверяване на правописа.
На стандартния вход да се подаде името на файла за проверка.
Да се създаде изходен файл results.csv, който да съдържа сгрешените думи във формат:
ред във файла на съответната дума, самата дума, за кой път се среща 

За улеснение да приемем, че единствените препинателни знаци са , и .
Aко целия текст е верен, results.csv трябва да е празен файл.
Думите се извеждат във реда във който се срещат във файла.

Пример: ruby english_1.rb text.txt",test_zadacha_1.rb
LazyGenerators,"========Задача 2=======

Да се създаде програма за превод от американски до британски английски.
На стандартния вход да се подаде името на файла за превод.
Резултата да се изведе на стандартния изход.

За улеснение да приемем, че единствените препинателни знаци са , и .

Използвайте dictionary.txt.

Пример: ruby english_2.rb text.txt",test_zadacha_2.rb
